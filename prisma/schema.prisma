// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod-prisma {
  provider    = "zod-prisma"
  output      = "./zod"
  modelCase   = "camelCase"
  modelSuffix = "Schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  sku         String           @unique
  basePrice   Decimal          @db.Decimal(10, 2)
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  available   Boolean          @default(true)
  images      ProductImage[]
  variants    ProductVariant[]
  orders      Order[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  altText   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductVariant {
  id        String  @id @default(cuid())
  name      String
  sku       String  @unique
  price     Decimal @db.Decimal(10, 2)
  stock     Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  orders    Order[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Customer {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  name      String
  email     String
  phone     String
  address   String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String          @id @default(cuid())
  customer         Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String?
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  totalAmount      Decimal         @db.Decimal(10, 2)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model User {
  id             String    @id @default(cuid())
  sessions       Session[]
  email          String    @unique
  fullName       String
  hashedPassword String    @unique
  role           Role
  customer       Customer?
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  Admin
  Superadmin
  User
}

model Store {
  id          String  @id @default(cuid())
  name        String
  url         String
  maintenance Boolean @default(false)
}
